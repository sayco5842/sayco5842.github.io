---
layout: post
title:  "REST API"
date:   2019-11-04 10:00:00
author: sjung
categories: REST
tags: develop
---

# REST
- REpresentational State Transfer
- 인터넷 상의 시스템 간의 상호 운용성(interoperability)을 제공하는 방법중 하나
- 시스템 제각각의 독립적인 진화를 보장하기 위한 방법
- REST API: REST 아키텍처 스타일을 따르는 API

 -> REST 분산 하이퍼미디어 시스템 (예:웹)을 위한 아키텍처 스타일
 
REST == 아키텍처 스타일 == 제약조건들
제약조건을 모두 따라야 REST를 따른다고 볼수있다.

# REST 아키텍처 스타일

# Client-Server
1. 일관적인 인터페이스로 분리되어야 한다.
2. 분리를 통해 Server-Client의 의존성을 줄이고 각각의 기능에 집중할 수 있다.

클라이언트는 요청, 컨텍스트 집중, 서버는 인증,인가, 데이터베이스 ...

# Stateless (각 요청 간 클라이언트의 콘텍스트가 서버에 저장되어서는 안 된다)
1. Stateless 하다는 것은 서버가 어떠한 Client 의 Status 도 저장하지 않는다는 뜻 
2. Client 는 매 요청마다 자신을 인증할 수 있는 Token 이나 Key 등을 Request 에 포함시켜 전송합니다. 
3. 만약 클라이언트의 요청이 Stateful 하다면 서버가 클라이언트의 현재 상태를 저장해야하고, 클라이언트의 상태는 해당 서버에 종속이 됩니다.
=> 독립적인 진화

# Cache
클라이언트는 응답을 캐싱할 수 있어야 한다.

# Uniform Interface 
리소스에 대한 조작을 통일되고 한정적인 인터페이스로 수행하는 아키텍처 스타일

# Layered System 
클라이언트는 보통 대상 서버에 직접 연결되었는지, 
또는 중간 서버를 통해 연결되었는지를 알 수 없다.
중간 서버는 로드 밸런싱 기능이나 공유 캐시기능을 제공함으로써 시스템 규모 확장성을 향상시키는데 유용하다.

# Code-On-Demand (optional)
코드에서 서버를 클라이언트로 보내 실행 가능해야 한다


# Uniform Interface
- Identification of resources -> 리소스가 URI로 식별되야함
- manipulation of resources through represenations -> 메세지삭제 DELETE, 수정 PUT,PATCH...
- self-descrive messages
- hypermisa as the engine of appliaction state (HATEOAS)

# self-descrive messages
메시지는 스스로 설명할 수 있어야한다.

<pre><code>
HTTP/1.1 200 OK
Content-Type: application/json
[ {"op": "remove", "path": "a/b/c"}]
</code></pre>




<pre><code>
HTTP/1.1 200 OK
Content-Type: application/json-patch+json
[ {"op": "remove", "path": "a/b/c"}]
</code></pre>

# HATEOAS
