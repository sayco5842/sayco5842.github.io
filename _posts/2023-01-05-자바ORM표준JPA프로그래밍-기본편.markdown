---
layout: post
title:  "자바 ORM 표준JPA 프로그래밍-기본편-01"
date:   2023-01-05 10:00:00
author: sjung
categories: JPA
tags: develop
---

# 영속성 관리 - 내부 동작 방식

## 영속성 컨텍스트

1. 엔티티를 영구 저장하는 환경
2. EntityManager를 통해 접근
3. 비영속, 영속, 준영속,삭제

영속성 컨텍스트 이점
**1차 캐시**
- 동일한 트랜잭션 내에서 캐시.
- 성능한 이점보다는 매커니즘에 의한 이점이 좀더 큼
- ex) 10명에 조회요청이 올경우 각각에 트랜잭션에서 처리함으로 1차캐시는 성능상에 크게 도움이 되진않음.

<img width="1246" alt="image" src="https://user-images.githubusercontent.com/23027091/210803751-91bd87be-ff28-4d4d-923e-f43d654f7856.png">

1. 엔티티를 영속상태로 만들시 1차캐시에 저장됨.
2. 해당 엔티티를 동일 트랜잭션에서 조회시 1차캐시에서 해당 엔티티를 가져옴.


<img width="1194" alt="image" src="https://user-images.githubusercontent.com/23027091/210803879-34e1dac7-1548-4cfd-9a40-caf691fbbb8a.png">

1. member2를 조회한다고했을때 1차캐시에 저장되어있는지 확인
2. 없을 경우 db에서 조회후 1차캐시에 저장.



**동일성보장**
- 동일한 트랜잭션 내에서 == 비교시 동일성 보장
- 1차 캐시에 저장된 동일한 정보를 가져오기때문

**트랜잭션을 지원하는 쓰기 지연**
- 쓰기를 모아두었다가 한번에 INSERT 쿼리를 보냄.
- 
~~~java
EntityManager em = emf.createEntityManager();
EntityTransaction transaction = em.getTransaction();

transaction.begin(); // [트랜잭션] 시작

em.persist(memberA);
em.persist(memberB);
//여기까지 INSERT SQL을 데이터베이스에 보내지 않는다.

//커밋하는 순간 데이터베이스에 INSERT SQL을 보낸다.
transaction.commit(); // [트랜잭션] 커밋
~~~

1. em.persist(memberA); 할때 1차캐시, 쓰기 지연 SQL 저장소에 각각 저장.
2. em.persist(memberB); 할때 1차캐시, 쓰기 지연 SQL 저장소에 각각 저장.
3. 트랜잭션 commit될때 해당 INSERT쿼리 DB에 보냄.

<img width="998" alt="image" src="https://user-images.githubusercontent.com/23027091/210805101-0de06cba-78ae-4e8f-8c27-f5ff5d677899.png">
<img width="1341" alt="image" src="https://user-images.githubusercontent.com/23027091/210805195-ac25c0d6-f97d-458b-8e67-f1a9726075bd.png">



**변경감지 (DirtyChecking)**
- 영속상태에 엔티티를 수정하면 1차 캐시에 스냅샷과 비교하여 변경이 되었을 경우 UPDATE문 보냄.


<img width="1380" alt="image" src="https://user-images.githubusercontent.com/23027091/210805455-6c9d2fe3-d38e-4415-adc0-fa9f1e8a15b3.png">



## Flush
- 영속성 컨텍스트 변경내용을 데이터베이스에 반영


**플러시 발생**
- 변경감지
- 수정된 엔티티 쓰기 지연 SQL에 등록
- 쓰기 지연 SQL 저장소의 쿼리를 데이터베이스에 전송
- 1차캐시 내용은 유지가된다.

**플러시 하는방법**
- em.flush()
- 트랜잭션 커밋 - 플러시 자동호출
- JPQL 쿼리 실행 - 플러시 자동호출


**플러시 모드 옵션**
- AUTO - 커밋이나 쿼리를 실행할때
- COMMIT - 커밋할때만 플러시
-> 기본적으로 AUTO로 쓰면됨

플러시는
1. 영속성 컨텍스트를 비우지 않음
2. 영속성 컨텍스트의 변경내용을 데이터베이스에 동기화
3. 트랜잭션이라는 작업 단위가 중요 -> 커밋 직전에만 동기화 하면 됨



<img width="506" alt="image" src="https://user-images.githubusercontent.com/23027091/210797612-60b5300c-975b-488e-acd6-fb2b5967a044.png">
