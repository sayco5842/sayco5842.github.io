---
layout: post
title:  "스프링 부트와 JPA 실무 완전 정복 로드맵"
date:   2023-01-03 10:00:00
author: sjung
categories: JPA
tags: develop
---

# JPA 소개

## SQL 중심적인 개발의 문제점

* SQL 중심적 개발!


~~~java
// SQL 중심적 개발!
public class Member {
  private String memberId;
  private String name;
  ...
}

~~~

```
INSERT INTO MEMBER(MEMBER_ID, NAME) VALUES ...
SELECT MEMBER_ID, NAME FROM MEMBER
UPDATE MEMBER SET
```

DB와 통신하기위해 불가피하게 SQL을 많이 작성한다.

---

* 패러다임의 불일치!

1. 상속
2. 연관관계
3. 데이터 타입
4. 데이터 식별방법


> 상속

<img width="1013" alt="image" src="https://user-images.githubusercontent.com/23027091/210369387-80695ebe-f7cc-4e5e-89ae-b117e0494090.png">

만약 앨범을 생성한다면...
1. INSERT INTO ITEM ...
2. INSERT INTO ALBUM ...

조회를 한다면..
1. join쿼리작성
2. 각 객체 생성
3. 객 객체에 담아주고..
4. 복잡...

---

> 연관 관계

<img width="615" alt="image" src="https://user-images.githubusercontent.com/23027091/210370049-6cc171bd-d556-4999-a5e6-3dc63314ebe7.png">

1. 객체를 관계형 DB에맞게 설계하게됨.
2. 엔티티 신뢰가 깨짐 member.getTeam(), member.getOrder() (null)
3. 객체답게 모델링할수록 매핑작업만 늘어난다.

---

객체를 자바 컬렉션에 저장하듯이 DB에 저장할수 없을가?
-> JPA

---

## JPA

* JAVA 진영의 ORM 기술 표준 

> ORM?
* 객체는 객체답게 설계
* 관계형 데이터베이스는 관계형 데이터베이스답게 설계
* ORM 프레임워크가 중간에서 매핑

<img width="750" alt="image" src="https://user-images.githubusercontent.com/23027091/210375295-703360e7-3b27-4486-897f-4e105f23550c.png">


저장

<img width="774" alt="image" src="https://user-images.githubusercontent.com/23027091/210375380-5fd9597f-178f-4f2f-a83c-917ae3339bd7.png">

조회

<img width="800" alt="image" src="https://user-images.githubusercontent.com/23027091/210375490-a9715d47-fc6c-4c52-9ab7-ee980a1f8f06.png">


* JPA 소개

ORM을 구현한 EJB라는 기술이있었으나 어렵고 성능이 떨어짐 -> JPA(자바표준) 새로만듬, 하이버네이트(오픈소스를 거의 그대로옮긴 수준)

* JPA는 인터페이스의 모음
* JPA 표준인터페이스를 구현한 구현체는 3개가 있음 Hibernate, EclipseLink, DataNucleus가 있으나 거의 Hibernate를 쓴다.

-> SQL중심에서 객체중심으로 개발
-> 생산성
-> 패러다임 불일치 해결




---
<img width="510" alt="image" src="https://user-images.githubusercontent.com/23027091/210376839-7fe3bc72-06ad-404b-bb93-9c8e3d492115.png">









